name: iOS Cucumber+Reports

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    name: Build and Test default scheme using any available iPhone simulator
    runs-on: macos-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set Default Scheme
        run: |
          scheme_list=$(xcodebuild -list -json | tr -d "\n")
          default=$(echo $scheme_list | ruby -e "require 'json'; puts JSON.parse(STDIN.gets)['project']['targets'][0]")
          echo $default | cat >default
          echo Using default scheme: $default

      - name: Start Simulator
        id: start_simulator
        run: |
          device=$(xcrun simctl create "TestDevice" "iPhone 12" "latest")
          echo "DEVICE_UDID=${device}" >> $GITHUB_ENV
          xcrun simctl boot "${device}"
          xcrun simctl bootstatus "${device}" -b
        env:
          device: ${{ secrets.device }}
          platform: ${{ secrets.platform }}
          
      - name: Build
        env:
          scheme: ${{ 'default' }}
          platform: ${{ 'iOS Simulator' }}
          DEVICE_UDID: ${{ steps.start_simulator.outputs.device }}
        run: |
          device=$DEVICE_UDID
          if [ $scheme = default ]; then scheme=$(cat default); fi
          if [ "`ls -A | grep -i \\.xcworkspace\$`" ]; then filetype_parameter="workspace" && file_to_build="`ls -A | grep -i \\.xcworkspace\$`"; else filetype_parameter="project" && file_to_build="`ls -A | grep -i \\.xcodeproj\$`"; fi
          file_to_build=$(echo $file_to_build | awk '{$1=$1;print}')
          xcodebuild build-for-testing -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -destination "platform=$platform,UDID=$device"

      - name: Test
        env:
          scheme: ${{ 'default' }}
          platform: ${{ 'iOS Simulator' }}
          DEVICE_UDID: ${{ steps.start_simulator.outputs.device }}
        run: |
          device=$DEVICE_UDID
          if [ $scheme = default ]; then scheme=$(cat default); fi
          if [ "`ls -A | grep -i \\.xcworkspace\$`" ]; then filetype_parameter="workspace" && file_to_build="`ls -A | grep -i \\.xcworkspace\$`"; else filetype_parameter="project" && file_to_build="`ls -A | grep -i \\.xcodeproj\$`"; fi
          file_to_build=$(echo $file_to_build | awk '{$1=$1;print}')
          xcodebuild test-without-building -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -destination "platform=$platform,UDID=$device"

      - name: Get TARGET_DEVICE_IDENTIFIER
        id: get_device_identifier
        run: |
          TARGET_DEVICE_IDENTIFIER=${DEVICE_UDID}
          echo "TARGET_DEVICE_IDENTIFIER=${TARGET_DEVICE_IDENTIFIER}"
          echo "TARGET_DEVICE_IDENTIFIER=${TARGET_DEVICE_IDENTIFIER}" >> $GITHUB_ENV

      - name: Set TARGETNAME
        run: echo "TARGETNAME=YOUR_TARGET_NAME" >> $GITHUB_ENV

      - name: Find Cucumber Report
        id: resolve_path
        run: |
          if [ -z "$TARGET_DEVICE_IDENTIFIER" ] || [ -z "$TARGETNAME" ]; then
            echo "Error: TARGET_DEVICE_IDENTIFIER or TARGETNAME is not set"
            exit 1
          fi
          FILE_PATH=$(find ~/Library/Developer/CoreSimulator/Devices/$TARGET_DEVICE_IDENTIFIER -name "CucumberTestResultsFor$TARGETNAME.json" -print0 | xargs -r -0 ls -1 -t | head -1)
          echo "FILE_PATH=${FILE_PATH}"
          echo "cucumberReportPath=${FILE_PATH}" >> $GITHUB_ENV

      - name: Debug Cucumber Report Path
        run: echo "Cucumber Report Path: ${{ env.cucumberReportPath }}"

      - name: Upload Cucumber Report
        uses: actions/upload-artifact@v2
        with:
          name: cucumber-reports
          path: ${{ env.cucumberReportPath }}
